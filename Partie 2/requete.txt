# --------- INSERTIONS ---------

# Ajouter un nouveau film :
db.films.insertOne(
    {
        "titre": "Interstellar",
        "description": "Un groupe d'explorateurs voyage à travers un trou de ver pour trouver une nouvelle maison pour l'humanité.",
        "categorie": "Science-fiction",
        "duree": 169,
        "realisateur": "Christopher Nolan"
    }
)

# Ajouter un nouveau commentaire :
{
    "_id": ObjectId("60bce99de22a0d0c6a211957"),
    "utilisateurID": ObjectId("60bce99de22a0d0c6a211949"),
    "filmID": ObjectId("60bce99de22a0d0c6a21193f"),
    "commentaire": "Le film m'a plu"
}


# --------- LECTURES ---------

# Trouver tous les films de la catégorie "Science-fiction" :
db.films.find({categorie: "Science-fiction"})

# Trouver tous les films qui ont été projetés dans la salle "1" du cinéma "Cinéma 1" :
db.diffusions.find({cinema: "Cinéma 1", "diffusions.salle": "1"})

# Trouver le nombre total d'entrées pour chaque film 
db.diffusion.aggregate([
    {$unwind: "$diffusions"},
    {$group: {_id: "$diffusions.filmID", total_entrees: {$sum: "$diffusions.entrees"}}}
])

# Trouver le nombre de commentaires pour chaque film :
db.commentaires.aggregate([
    {$group: {_id: "$filmID", nombre_commentaires: {$sum: 1}}}
])

# Trouver les films les plus populaires (ceux avec le plus grand nombre d'entrées) :
db.diffusions.aggregate([
    {$unwind: "$diffusions"},
    {$group: {_id: "$diffusions.filmID", total_entrees: {$sum: "$diffusions.entrees"}}},
    {$sort: {total_entrees: -1}},
    {$limit: 10}
])

# Trouver la moyenne des notes pour chaque film :
db.notes.aggregate([
    {$group: {_id: "$filmID", moyenne_notes: {$avg: "$note"}}}
])

# Trouver tous les films qui ont été projetés au moins une fois dans chaque cinéma :
db.diffusions.aggregate([
    {$unwind: "$diffusions"},
    {$group: {_id: {cinema: "$cinema", filmID: "$diffusions.filmID"}}},
    {$group: {_id: "$_id.filmID", count: {$sum: 1}}},
    {$match: {count: {$eq: 3}}}
])

# Trouver le nombre total d'entrées pour chaque cinéma :
db.diffusions.aggregate([
    {$unwind: "$diffusions"},
    {$group: {_id: "$cinema", total_entrees: {$sum: "$diffusions.entrees"}}}
])

# Trouver les utilisateurs ayant commenté au moins 5 films différents :
db.commentaires.aggregate([
    {$group: {_id: "$utilisateurID", nombre_films: {$addToSet: "$filmID"}}},
    {$project: {
        utilisateurID: "$_id",
        nombre_films: 1,
        nb_films_different: {$size: "$nombre_films"}
    }},
    {$match: {$expr: {$gte: ["$nb_films_different", 5]}}}
])


# MAP−REDUCE

# Trouver le nombre de commentaire pour chaque film

var mapCountCommentaires = function() {
   emit(this.filmID, 1);
};

var reduceCountCommentaires = function(filmID, commentaires) {
   return Array.sum(commentaires);
};

db.commentaires.mapReduce(
   mapCountCommentaires,
   reduceCountCommentaires,
   { out: "map_reduce_count_commentaires" }
);

# Calcul de la moyenne des notes de chaque film

var mapAvgNotes = function() {
   emit(this.filmID, this.note);
};

var reduceAvgNotes = function(filmID, notes) {
   return Array.avg(notes);
};

db.notes.mapReduce(
   mapAvgNotes,
   reduceAvgNotes,
   { out: "map_reduce_avg_notes" }
);